@using LittleCofeeShopWebApp.Domain.Entities
@using LittleCofeeShopWebApp.Domain.Concrete
@model LittleCofeeShopWebApp.Domain.Entities.Cofee

@{
    ViewBag.Title = "Admin: Edit " + @Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    HtmlHelper.ClientValidationEnabled = false;
    HtmlHelper.UnobtrusiveJavaScriptEnabled = false;
}
<div class="panel">
    <div class="panel-heading">
        <h3>Edit @Model.Name</h3>
    </div>
    @using (Html.BeginForm("Edit", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        foreach (var property in ViewData.ModelMetadata.Properties)
        {
            switch (property.PropertyName)
            {
                case "CofeeId":
                    @Html.HiddenFor(m => m.CofeeId)
                    break;
                case "ImageData":
                case "ImageMimeType":
                    // do nothing
                    break;
                case "Description":
                    <div class="form-group">
                        <label>@(property.DisplayName ?? property.PropertyName)</label>
                        @Html.TextArea(property.PropertyName, null, new { @class = "form-control", rows = 5 })
                    </div>
                    break;
                case "VolumeOptions":
                    <div class="form-group">
                        <label>@(property.DisplayName ?? property.PropertyName)</label>

                        <div>
                            @{
                                var volumeOptionsGrid = new WebGrid(Model.VolumeOptions, canPage: false);
                                volumeOptionsGrid.GetHtml(tableStyle: "table table-bordered table-responsive table-hover",
                                    columns: volumeOptionsGrid.Columns(
                                         volumeOptionsGrid.Column("VolumeOptionId", "VolumeOption Id"),
                                         volumeOptionsGrid.Column("Name", "Name"),
                                         volumeOptionsGrid.Column("Size", "Size"),
                                         volumeOptionsGrid.Column("IsCupCap", "IsCupCap"),
                                         volumeOptionsGrid.Column("CupPrice", "CupPrice")
                                )
                                );
                            }
                        </div>
                    </div>
                    break;
                case "SugarOptions":

                    if (Model.SugarOptions.Count != 0)
                    {
                        <div class="form-group">
                            <label>@(property.DisplayName ?? property.PropertyName)</label>

                            <div>
                                @{
                                    var sugarOptionsGrid = new WebGrid(Model.SugarOptions, canPage: false);
                                    sugarOptionsGrid.GetHtml(tableStyle: "table table-bordered table-responsive table-hover",
                                        columns: sugarOptionsGrid.Columns(
                                            sugarOptionsGrid.Column("SugarOptionId", "SugarOption Id"),
                                            sugarOptionsGrid.Column("Size", "Size"),
                                            sugarOptionsGrid.Column("Price", "Price")
                                    )
                                    );
                                }

                            </div>
                        </div>
                    }

                    break;
                case "MilkOptions":

                    if (Model.MilkOptions.Count != 0)
                    {
                        <div class="form-group">
                            <label>@(property.DisplayName ?? property.PropertyName)</label>

                            <div>
                                @{
                                    var milkOptionsGrid = new WebGrid(Model.MilkOptions, canPage: false);
                                    milkOptionsGrid.GetHtml(tableStyle: "table table-bordered table-responsive table-hover",
                                            columns: milkOptionsGrid.Columns(
                                                    milkOptionsGrid.Column("MilkOptionId", "MilkOption Id"),
                                                    milkOptionsGrid.Column("Size", "Size"),
                                                    milkOptionsGrid.Column("Price", "Price")
                                    )
                                    );
                                }

                            </div>
                        </div>
                    }
                    break;
                default:
                    @Html.TextBox(property.PropertyName, null, new { @class = "form-control" })
                    break;
            }//end case
        }//end foreach

        <div class="form-group">
            <div style="position:relative;">
                <label>Image</label>
                <a class='btn' href='javascript:;'>
                    Choose File...
                    <input type="file" name="Image" size="40"
                            style="position:absolute;z-index:2;top:0;
                            left:0;filter: alpha(opacity=0); opacity:0;
                            background-color:transparent;color:transparent;"
                            onchange='$("#upload-file-info").html($(this).val());'>
                </a>
                <span class='label label-info' id="upload-file-info"></span>
            </div>
            @if (Model.ImageData == null)
            {
                <div class="form-control-static">No Image</div>
            }
            else
            {
                <img class="img-thumbnail" width="150" height="150"
                        src="@Url.Action("GetImage", "Product",
		            new { Model.CofeeId })" />
                            }
        </div>

        <div class="panel-footer">
            <input type="submit" value="Save" class="btn btn-primary" />
            @Html.ActionLink("Cancel and return to List", "Index", null, new {
                @class = "btn btn-default"
                })
        </div>
    }//end begin form
</div>
